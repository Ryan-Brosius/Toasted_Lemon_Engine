#include "TilesheetMap.h"
#include "Sprite.h"

extern Game* game;

//int demo[20][17] = {
//	{ 0, 2, 0, 0, 0, 0, 0,12, 8,13, 1, 0, 3, 0, 0, 0, 0},
//	{ 0, 0, 0, 0, 0, 0, 1,12, 8,13, 0, 0, 0, 0, 2, 0, 0},
//	{ 0, 0, 6, 7, 0, 0, 0,12, 8,13, 3, 0, 0, 6, 7, 0, 1},
//	{ 0, 0, 4, 5, 2, 0, 0,12, 8,13, 0, 0, 1, 4, 5, 0, 0},
//	{ 0, 0, 0, 2, 0, 3, 0,12, 8,13, 0, 2, 0, 0, 0, 3, 0},
//	{ 0, 0, 0, 0, 0, 0, 3,12, 8,13, 0, 0, 0, 0, 0, 0, 0},
//	{15,14,14,14,14,14,14, 8, 8, 8,14,14,14,14,14,14,16},
//	{12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
//	{10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,11},
//	{ 1, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 0, 0, 0},
//	{ 0, 0, 0, 0, 3, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0},
//	{ 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
//	{ 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
//	{ 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
//	{ 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
//	{ 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
//	{ 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
//	{ 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
//	{ 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
//	{ 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
//};

int demo[40][17] = {
	{61,61,53,89,35,35,35,35,87,35,35,35,88,35,62,61,61},
	{61,36,52,35,35,35,87,35,35,89,35,35,35,35,63,64,61},
	{36,37,38,35,88,24,26,26,26,26,26,28,35,35,65,66,64},
	{39,40,87,35,24,25,30,30,30,30,30,27,28,35,87,67,68},
	{42,43,35,24,25,30,30,30,30,30,30,30,27,28,35,69,70},
	{44,45,89,19,30,30,15,9,2,8,15,30,30,20,35,71,72},
	{46,47,35,19,30,30,30,3,1,5,30,30,30,20,35,73,74},
	{57,81,82,10,11,30,15,6,4,7,15,30,31,22,83,84,76},
	{59,79,80,12,33,11,30,30,30,30,30,21,34,32,85,86,78},
	{39,40,35,35,12,13,29,29,29,29,29,14,32,35,35,67,68},
	{42,43,35,35,35,16,17,17,17,17,17,18,35,35,89,69,70},
	{44,45,35,88,35,35,35,35,35,35,87,35,35,87,35,71,72},
	{46,47,35,35,35,35,35,35,35,35,35,35,35,35,35,73,74},
	{57,81,82,35,89,35,87,96,98,89,35,35,35,35,83,75,76},
	{59,79,80,35,35,35,105,104,95,35,35,106,35,35,85,77,78},
	{39,40,35,87,35,35,90,91,95,35,35,88,35,88,35,67,68},
	{42,43,35,35,35,35,90,91,99,98,35,35,35,35,35,69,70},
	{44,45,35,88,35,35,101,100,91,95,35,35,35,35,35,71,72},
	{46,47,35,35,35,35,35,90,91,95,35,35,89,87,35,73,74},
	{57,58,82,35,88,35,35,90,91,95,35,35,35,35,83,75,76},
	{59,60,80,35,35,35,35,90,102,103,35,35,35,35,85,77,78},
	{39,40,35,87,35,35,35,90,95,35,35,87,88,35,35,67,68},
	{42,43,35,35,35,35,35,101,94,35,96,98,35,35,35,69,70},
	{44,45,35,35,35,35,35,35,35,35,90,95,35,35,35,71,72},
	{46,47,35,88,35,35,96,97,98,35,101,94,35,35,35,73,74},
	{57,58,82,35,35,89,90,91,95,35,35,35,35,35,83,75,76},
	{59,60,80,35,35,87,90,91,95,35,35,88,35,35,85,77,78},
	{39,40,35,35,35,35,101,100,99,98,35,35,35,35,35,67,68},
	{42,43,35,35,88,35,35,90,91,95,87,35,35,35,35,69,70},
	{44,45,35,35,35,35,35,92,93,94,35,35,87,35,35,71,72},
	{46,47,35,35,35,35,96,98,89,35,88,35,35,35,35,73,74},
	{57,58,82,35,35,87,90,99,98,35,35,35,35,35,83,75,76},
	{59,60,80,35,35,35,92,100,95,35,35,88,35,35,85,77,78},
	{39,40,35,35,35,35,35,101,103,35,35,35,35,35,89,67,68},
	{42,43,88,35,35,35,35,87,35,35,35,35,35,35,35,69,70},
	{44,45,35,35,35,89,35,96,98,35,35,87,35,35,35,71,72},
	{46,47,35,35,35,35,35,90,95,35,35,35,35,35,35,73,74},
	{57,58,82,35,35,35,96,104,95,35,88,35,35,35,83,75,76},
	{59,60,80,35,87,35,90,91,99,98,35,35,88,35,85,77,78},
	{39,40,35,35,35,35,101,100,91,95,89,35,35,35,35,67,68}
};


TilesheetMap::TilesheetMap()
{
	int tileNum = 0;
	for (const auto& entry : std::filesystem::directory_iterator(audioPath)) {
		mapTiles[tileNum] = new Sprite();
		mapTiles[tileNum]->init(entry.path().string().c_str());
		mapTiles[tileNum]->scale(3, 3);
		tileNum++;
	}

	mapTiles[0]->setSpriteSheet(106);
	
	LoadMap((int*)demo, 40, 17);
	game->camera->setMapSize(0, HEIGHT + 40 * 16);
}

TilesheetMap::~TilesheetMap() {}

void TilesheetMap::LoadMap(int* arr, int height, int width)
{
	for (int row = 0; row < height; row++)
	{
		for (int col = 0; col < width; col++)
		{
			map[row][col] = *(arr + col + (width * row));
		}
	}
}

void TilesheetMap::DrawMap(SDL_Texture* framebuffer, int camera_pos_x, int camera_pos_y)
{
	int type = 0;
	int width = 48;
	int height = 48;

	camera_pos_x = SDL_max(camera_pos_x, 0);
	camera_pos_y = SDL_max(camera_pos_y, 0);

	int xpos_offset = -1 * camera_pos_x;
	int ypos_offset = -1 * camera_pos_y;

	int row = camera_pos_y / height;
	int maxRow = 2 + row + HEIGHT / height;

	int col = camera_pos_x / width;
	int maxCol = 2 + col + WIDTH / width;

	for (int i = row; i < maxRow; i++)
	{
		for (int j = col; j < maxCol; j++)
		{
			int xpos = j * width;
			int ypos = i * height;
			type = map[i][j];
			if (mapTiles[1] != nullptr) {
				mapTiles[0]->setSheetOffset(type);
				if (type == 35)
					continue;
				mapTiles[0]->draw(framebuffer, xpos + xpos_offset, ypos + ypos_offset);
			}
		}
	}
}

void TilesheetMap::DrawMap(SDL_Texture* framebuffer)
{
	TilesheetMap::DrawMap(framebuffer, 0, 0);
}